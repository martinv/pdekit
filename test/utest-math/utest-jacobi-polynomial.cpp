/// Generate automatically the 'main' function for the test module
#define BOOST_TEST_DYN_LINK
#define BOOST_TEST_MODULE jacobi_polynomial_test
#include <boost/test/unit_test.hpp>

/// Standard template library headers
#include <cmath>
#include <ctime>
#include <iomanip>
#include <iostream>

/// PDEKIT headers
#include "math/polynomials/JacobiPolynomial.hpp"

using namespace pdekit;

// ----------------------------------------------------------------------------

BOOST_AUTO_TEST_CASE(jacobi_polynomial_utest)
{

  const Uint n = 20;

  const Real xi[n] = {-0.29668098587401, 0.83438732765962,  -0.23910830604929, 0.06159510601795,
                      0.13764732174439,  -0.67563538361351, -0.66870254100044, 0.37842900628002,
                      -0.54204606256636, 0.07668487052011,  -0.78669445963883, 0.63460644130687,
                      -0.48025919429869, -0.63630594339430, 0.73858441528018,  0.70606223544379,
                      -0.19638393249612, -0.63218442343517, 0.80543221983056,  -0.32456118035725};

  const Real alpha[n] = {9, 3, 6, 8, 5, 8, 7, 8, 10, 10, 10, 9, 9, 3, 6, 7, 1, 3, 10, 10};

  const Real beta[n] = {6, 8, 1, 10, 1, 4, 3, 5, 2, 1, 1, 1, 5, 2, 6, 4, 3, 5, 5, 4};

  const Real N[n] = {6, 8, 1, 2, 4, 6, 7, 1, 9, 5, 8, 4, 10, 2, 2, 6, 2, 1, 5, 2};

  const Real dP[n] = {
      -57.23823818281770, -15.91646363114354, 4.50000000000000,    -3.38576525492731,
      -5.14767862116959,  51.86883769642960,  -45.58563339906645,  7.50000000000000,
      -30.85358535338066, 0.74952626998364,   -2.33582195384723,   840.23171460139781,
      74.64428646685813,  -9.45350698109731,  44.31506491681072,   1592.10076924025361,
      -6.24937505494563,  5.00000000000000,   6465.73050583533859, 0.67106970267071};

  const Real P[n] = {2.31511999500973,  -7.20223792934412, 1.42401262277821,    -2.67764759150878,
                     -2.41453616433023, -5.43861770859417, -0.74581679551307,   4.33821754710012,
                     0.45296321878015,  -9.34719964159217, 1.04392262168621,    193.15212501817138,
                     -5.34089023517055, 1.37135539560154,  14.36520815484290,   112.55335127970113,
                     0.45731030633488,  -4.16092211717583, 1051.69037058620506, -1.99705663695528};

  math::JacobiPolynomial jp;

  // Arguments: jp(N,alpha,beta,x)

  const Real eps = 1.e-6;

  std::cout.precision(12);

  for (Uint i = 0; i < n; i++)
  {
    const Real dP_computed = jp.dx(N[i], alpha[i], beta[i], xi[i]);
    BOOST_CHECK_CLOSE(dP_computed, dP[i], eps);

    const Real P_computed = jp(N[i], alpha[i], beta[i], xi[i]);
    BOOST_CHECK_CLOSE(P_computed, P[i], eps);
  }
}

// ----------------------------------------------------------------------------
